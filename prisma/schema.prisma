generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cron {
  id        Int         @id @default(autoincrement())
  timing    cron_timing @default(WEEKLY)
  createdAt DateTime    @default(now())
  updatedAt DateTime
}

model cronhistory {
  id            Int                @id @default(autoincrement())
  links         Json
  data          Json
  status        cronhistory_status @default(PENDING)
  startTime     DateTime?
  endTime       DateTime?
  failureReason String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime
}

model domains {
  id                 Int                        @id @default(autoincrement())
  name               String?
  domain             String                     @unique(map: "Domains_domain_key")
  isActive           Boolean                    @default(false)
  status             domains_status             @default(NOT_CONFIGURED)
  storeImages        Boolean                    @default(false)
  priceElement       Json
  priceElementStatus domains_priceElementStatus @default(NOT_FOUND)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime
  links              links[]

  @@index([domain], map: "Domains_domain_idx")
}

model linkdata {
  id           Int             @id @default(autoincrement())
  status       linkdata_status @default(PENDING)
  images       Json
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  failedReason String?
  hashedUrl    String
  metadata     Json
  objectKey    String          @db.LongText

  @@unique([hashedUrl, createdAt], map: "LinkData_hashedUrl_createdAt_key")
  @@index([createdAt], map: "LinkData_createdAt_idx")
  @@index([hashedUrl], map: "LinkData_hashedUrl_idx")
}

model links {
  id               Int           @id @default(autoincrement())
  name             String?
  url              String        @db.LongText
  hashedUrl        String        @unique(map: "Links_hashedUrl_key")
  isActive         Boolean       @default(false)
  trackingImage    Boolean       @default(false)
  imageUrl         String?
  hasConfigChanged Boolean       @default(false)
  timing           links_timing  @default(WEEKLY)
  domainId         Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  domains          domains       @relation(fields: [domainId], references: [id], map: "Links_domainId_fkey")
  userlinkmap      userlinkmap[]

  @@index([domainId], map: "Links_domainId_idx")
  @@index([hashedUrl], map: "Links_hashedUrl_idx")
  @@index([name], map: "Links_name_idx")
}

model organization {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  creatorId Int      @unique(map: "Organization_creatorId_key")
  user      User     @relation(fields: [creatorId], references: [id], map: "Organization_creatorId_fkey")
}

model token {
  id          Int        @id @default(autoincrement())
  token       String
  type        token_type
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime   @default(now())
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Token_userId_fkey")

  @@index([userId], map: "Token_userId_fkey")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique(map: "User_email_key")
  name            String?
  password        String
  role            user_role     @default(USER)
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  image        String?
  isActive        Boolean       @default(true)
  organization    organization?
  token           token[]
  userlinkmap     userlinkmap[]
  accounts        Account[]
  sessions        Session[]
}

model userlinkmap {
  id           Int                @id @default(autoincrement())
  assignedName String?
  tags         String?
  userId       Int
  linkId       Int
  timing       userlinkmap_timing @default(WEEKLY)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  links        links              @relation(fields: [linkId], references: [id], map: "UserLinkMap_linkId_fkey")
  user         User               @relation(fields: [userId], references: [id], map: "UserLinkMap_userId_fkey")

  @@unique([userId, linkId], map: "UserLinkMap_userId_linkId_key")
  @@index([linkId], map: "UserLinkMap_linkId_fkey")
  @@index([userId, linkId], map: "UserLinkMap_userId_linkId_idx")
}

enum cron_timing {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum linkdata_status {
  SUCCESS
  FAILED
  PENDING
  CRON_FAILED
}

enum token_type {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum cronhistory_status {
  SUCCESS
  PENDING
  FAILED
}

enum domains_status {
  CONFIGURED
  NOT_CONFIGURED
  EXCLUDED
}

enum user_role {
  USER
  ADMIN
}

enum userlinkmap_timing {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum domains_priceElementStatus {
  SINGLE
  MULTIPLE
  NOT_FOUND
}

enum links_timing {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
